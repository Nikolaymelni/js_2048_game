{"version":3,"sources":["scripts/main.js"],"names":["score","rows","columns","gameField","table","document","querySelector","button","startMessage","loseMessage","winMessage","gameScore","hasFieldChanged","currentField","fieldCopy","r","c","hasSpace","includes","addRandomValue","value","Math","floor","random","updateCells","start","classList","add","replace","innerText","isLost","isWin","some","row","cell","remove","updateScore","innerHTML","cells","move","rowWithoutZeros","filter","el","i","isFinite","length","push","moveUp","moveDown","reverse","moveRight","moveLeft","addEventListener","e","map","arr","slice","preventDefault","code"],"mappings":"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","file":"main.bf59ad1b.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nlet score = 0;\r\nconst rows = 4;\r\nconst columns = 4;\r\nlet gameField = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\nconst table = document.querySelector('.game-field');\r\nconst button = document.querySelector('.button');\r\nconst startMessage = document.querySelector('.message-start');\r\nconst loseMessage = document.querySelector('.message-lose');\r\nconst winMessage = document.querySelector('.message-win');\r\nconst gameScore = document.querySelector('.game-score');\r\n\r\nbutton.addEventListener('click', start);\r\n\r\nfunction hasFieldChanged(currentField, fieldCopy) {\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let c = 0; c < columns; c++) {\r\n      if (currentField[r][c] !== fieldCopy[r][c]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction hasSpace() {\r\n  for (let r = 0; r < rows; r++) {\r\n    if (gameField[r].includes(0)) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction addRandomValue() {\r\n  const value = Math.floor(Math.random()) < 0.9 ? 2 : 4;\r\n\r\n  while (hasSpace()) {\r\n    const r = Math.floor(Math.random() * rows);\r\n    const c = Math.floor(Math.random() * columns);\r\n\r\n    if (gameField[r][c] === 0) {\r\n      gameField[r][c] = value;\r\n      break;\r\n    }\r\n  }\r\n\r\n  updateCells();\r\n}\r\n\r\nfunction start() {\r\n  score = 0;\r\n\r\n  gameField = [\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n    [0, 0, 0, 0],\r\n  ];\r\n\r\n  winMessage.classList.add('hidden');\r\n  startMessage.classList.add('hidden');\r\n  loseMessage.classList.add('hidden');\r\n  button.classList.replace('start', 'restart');\r\n  button.innerText = 'Restart';\r\n\r\n  addRandomValue();\r\n  addRandomValue();\r\n}\r\n\r\nfunction isLost() {\r\n  if (hasSpace()) {\r\n    return false;\r\n  }\r\n\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let c = 0; c < columns - 1; c++) {\r\n      if (gameField[r][c] === gameField[r][c + 1]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let r = 0; r < rows - 1; r++) {\r\n    for (let c = 0; c < columns; c++) {\r\n      if (gameField[r][c] === gameField[r + 1][c]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction isWin() {\r\n  if (gameField.some(row => row.some(cell => cell === 2048))) {\r\n    winMessage.classList.remove('hidden');\r\n  }\r\n}\r\n\r\nfunction updateScore() {\r\n  gameScore.innerHTML = score;\r\n}\r\n\r\nfunction updateCells() {\r\n  for (let r = 0; r < rows; r++) {\r\n    for (let c = 0; c < columns; c++) {\r\n      const cell = table.rows[r].cells[c];\r\n      const value = gameField[r][c];\r\n\r\n      cell.innerText = '';\r\n      cell.classList.value = '';\r\n      cell.classList.add('field-cell');\r\n\r\n      if (value > 0) {\r\n        cell.innerText = value;\r\n        cell.classList.add(`field-cell--${value}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  isWin();\r\n\r\n  updateScore();\r\n\r\n  if (isLost()) {\r\n    loseMessage.classList.remove('hidden');\r\n  }\r\n}\r\n\r\nfunction move(row) {\r\n  let rowWithoutZeros = row.filter(el => el !== 0);\r\n\r\n  for (let i = 0; i < rows - 1; i++) {\r\n    if (rowWithoutZeros[i] === rowWithoutZeros[i + 1]\r\n        && isFinite(rowWithoutZeros[i])) {\r\n      rowWithoutZeros[i] *= 2;\r\n      rowWithoutZeros[i + 1] = 0;\r\n      score += rowWithoutZeros[i];\r\n    }\r\n  }\r\n\r\n  rowWithoutZeros = rowWithoutZeros.filter(el => el !== 0);\r\n\r\n  while (rowWithoutZeros.length < rows) {\r\n    rowWithoutZeros.push(0);\r\n  }\r\n\r\n  return rowWithoutZeros;\r\n}\r\n\r\nfunction moveUp() {\r\n  for (let c = 0; c < columns; c++) {\r\n    let row = [gameField[0][c], gameField[1][c],\r\n      gameField[2][c], gameField[3][c]];\r\n\r\n    row = move(row);\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n      gameField[r][c] = row[r];\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveDown() {\r\n  for (let c = 0; c < columns; c++) {\r\n    let row = [gameField[0][c], gameField[1][c],\r\n      gameField[2][c], gameField[3][c]];\r\n\r\n    row.reverse();\r\n    row = move(row);\r\n    row.reverse();\r\n\r\n    for (let r = 0; r < rows; r++) {\r\n      gameField[r][c] = row[r];\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveRight() {\r\n  for (let r = 0; r < rows; r++) {\r\n    let row = gameField[r];\r\n\r\n    row.reverse();\r\n    row = move(row);\r\n    row.reverse();\r\n    gameField[r] = row;\r\n  }\r\n}\r\n\r\nfunction moveLeft() {\r\n  for (let r = 0; r < rows; r++) {\r\n    let row = gameField[r];\n\r\n    row = move(row);\r\n    gameField[r] = row;\r\n  }\r\n}\r\n\r\ndocument.addEventListener('keyup', e => {\r\n  const fieldCopy = gameField.map(arr => arr.slice());\r\n\r\n  e.preventDefault();\r\n\r\n  switch (e.code) {\r\n    case 'ArrowLeft':\r\n      moveLeft();\r\n      break;\r\n\r\n    case 'ArrowRight':\r\n      moveRight();\r\n      break;\r\n\r\n    case 'ArrowUp':\r\n      moveUp();\r\n      break;\r\n\r\n    case 'ArrowDown':\r\n      moveDown();\r\n      break;\r\n  }\r\n\r\n  if (hasFieldChanged(gameField, fieldCopy)) {\r\n    addRandomValue();\r\n  }\r\n\r\n  updateCells();\r\n});\r\n"]}